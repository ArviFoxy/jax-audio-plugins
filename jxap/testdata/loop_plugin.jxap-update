#loc = loc(unknown)
#loc11 = loc("state[0]")
#loc12 = loc("state[1]")
#loc13 = loc("buffers['input']")
#loc14 = loc("sample_rate")
module @jit__update_fn attributes {jax.uses_shape_polymorphism = true, mhlo.num_partitions = 1 : i32, mhlo.num_replicas = 1 : i32} {
  func.func public @main(%arg0: tensor<i32> {jax.global_constant = "_platform_index"} loc(unknown), %arg1: tensor<f32> loc(unknown), %arg2: tensor<f32> loc(unknown), %arg3: tensor<?xf32> loc(unknown), %arg4: tensor<f32> loc(unknown)) -> (tensor<f32> {jax.result_info = "result[0]['last_input'].value"}, tensor<f32> {jax.result_info = "result[0]['last_output'].value"}, tensor<?xf32> {jax.result_info = "result[1]['output']"}) {
    %c = stablehlo.constant dense<0> : tensor<i32> loc(#loc)
    %c_0 = stablehlo.constant dense<-1> : tensor<i32> loc(#loc)
    %c_1 = stablehlo.constant dense<1> : tensor<i32> loc(#loc)
    %0 = stablehlo.get_dimension_size %arg3, dim = 0 : (tensor<?xf32>) -> tensor<i32> loc(#loc82)
    %1 = stablehlo.compare  GE, %0, %c_1,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc83)
    stablehlo.custom_call @shape_assertion(%1, %0) {api_version = 2 : i32, error_message = "Input shapes do not match the polymorphic shapes specification. Expected value >= 1 for dimension variable 'BufferSize'. Using the following polymorphic shapes specifications: args[1]['input'].shape = (BufferSize,). Obtained dimension variables: 'BufferSize' = {0} from specification 'BufferSize' for dimension args[1]['input'].shape[0] (= {0}), . Please see https://docs.jax.dev/en/latest/export/shape_poly.html#shape-assertion-errors for more details.", has_side_effect = true} : (tensor<i1>, tensor<i32>) -> () loc(#loc84)
    %2 = stablehlo.convert %0 : tensor<i32> loc(#loc85)
    %3 = stablehlo.add %2, %c_0 : tensor<i32> loc(#loc86)
    %4 = stablehlo.compare  GE, %3, %c,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc83)
    %5 = stablehlo.convert %0 : tensor<i32> loc(#loc85)
    %6 = stablehlo.add %5, %c_0 : tensor<i32> loc(#loc86)
    stablehlo.custom_call @shape_assertion(%4, %6, %0) {api_version = 2 : i32, error_message = "Input shapes do not match the symbolic shape constraint BufferSize >= 1. Expected 'BufferSize - 1' to be greater or equal to 0, but found {0}.  Using the following polymorphic shapes specifications: args[1]['input'].shape = (BufferSize,). Obtained dimension variables: 'BufferSize' = {1} from specification 'BufferSize' for dimension args[1]['input'].shape[0] (= {1}), . Please see https://docs.jax.dev/en/latest/export/shape_poly.html#shape-assertion-errors for more details.", has_side_effect = true} : (tensor<i1>, tensor<i32>, tensor<i32>) -> () loc(#loc84)
    %7:3 = call @_wrapped_jax_export_main(%arg0, %0, %arg1, %arg2, %arg3, %arg4) : (tensor<i32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<?xf32>, tensor<f32>) -> (tensor<f32>, tensor<f32>, tensor<?xf32>) loc(#loc)
    return %7#0, %7#1, %7#2 : tensor<f32>, tensor<f32>, tensor<?xf32> loc(#loc)
  } loc(#loc)
  func.func private @_wrapped_jax_export_main(%arg0: tensor<i32> {jax.global_constant = "_platform_index"} loc(unknown), %arg1: tensor<i32> {jax.global_constant = "BufferSize"} loc(unknown), %arg2: tensor<f32> loc("state[0]"), %arg3: tensor<f32> loc("state[1]"), %arg4: tensor<?xf32> loc("buffers['input']"), %arg5: tensor<f32> loc("sample_rate")) -> (tensor<f32> {jax.result_info = "result[0]['last_input'].value"}, tensor<f32> {jax.result_info = "result[0]['last_output'].value"}, tensor<?xf32> {jax.result_info = "result[1]['output']"}) {
    %c = stablehlo.constant dense<1> : tensor<i32> loc(#loc)
    %c_0 = stablehlo.constant dense<0> : tensor<i32> loc(#loc)
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc)
    %cst_1 = stablehlo.constant dense<1.000000e+00> : tensor<f32> loc(#loc)
    %cst_2 = stablehlo.constant dense<1382.30078> : tensor<f32> loc(#loc)
    %0 = stablehlo.divide %cst_2, %arg5 : tensor<f32> loc(#loc87)
    %1 = stablehlo.tan %0 : tensor<f32> loc(#loc88)
    %2 = stablehlo.subtract %cst_1, %1 : tensor<f32> loc(#loc89)
    %3 = stablehlo.add %cst_1, %1 : tensor<f32> loc(#loc90)
    %4 = stablehlo.divide %2, %3 : tensor<f32> loc(#loc91)
    %5 = stablehlo.reshape %arg1 : (tensor<i32>) -> tensor<1xi32> loc(#loc92)
    %6 = stablehlo.dynamic_broadcast_in_dim %cst, %5, dims = [] : (tensor<f32>, tensor<1xi32>) -> tensor<?xf32> loc(#loc92)
    %7:6 = stablehlo.while(%iterArg = %arg4, %iterArg_3 = %4, %iterArg_4 = %c_0, %iterArg_5 = %arg2, %iterArg_6 = %arg3, %iterArg_7 = %6) : tensor<?xf32>, tensor<f32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<?xf32>
    cond {
      %8 = stablehlo.compare  LT, %iterArg_4, %arg1,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc94)
      stablehlo.return %8 : tensor<i1> loc(#loc93)
    } do {
      %8 = stablehlo.dynamic_slice %iterArg, %iterArg_4, sizes = [1] : (tensor<?xf32>, tensor<i32>) -> tensor<1xf32> loc(#loc95)
      %9 = stablehlo.reshape %8 : (tensor<1xf32>) -> tensor<f32> loc(#loc96)
      %10:3 = func.call @closed_call(%arg0, %arg1, %iterArg_3, %iterArg_5, %iterArg_6, %9) : (tensor<i32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<f32>) -> (tensor<f32>, tensor<f32>, tensor<f32>) loc(#loc97)
      %11 = stablehlo.broadcast_in_dim %10#2, dims = [] : (tensor<f32>) -> tensor<1xf32> loc(#loc98)
      %12 = stablehlo.dynamic_update_slice %iterArg_7, %11, %iterArg_4 : (tensor<?xf32>, tensor<1xf32>, tensor<i32>) -> tensor<?xf32> loc(#loc99)
      %13 = stablehlo.add %iterArg_4, %c : tensor<i32> loc(#loc100)
      stablehlo.return %iterArg, %iterArg_3, %13, %10#0, %10#1, %12 : tensor<?xf32>, tensor<f32>, tensor<i32>, tensor<f32>, tensor<f32>, tensor<?xf32> loc(#loc93)
    } loc(#loc93)
    return %7#3, %7#4, %7#5 : tensor<f32>, tensor<f32>, tensor<?xf32> loc(#loc)
  } loc(#loc)
  func.func private @closed_call(%arg0: tensor<i32> {jax.global_constant = "_platform_index"} loc(unknown), %arg1: tensor<i32> {jax.global_constant = "BufferSize"} loc(unknown), %arg2: tensor<f32> loc(unknown), %arg3: tensor<f32> loc(unknown), %arg4: tensor<f32> loc(unknown), %arg5: tensor<f32> loc(unknown)) -> (tensor<f32>, tensor<f32>, tensor<f32>) {
    %0 = stablehlo.multiply %arg2, %arg5 : tensor<f32> loc(#loc102)
    %1 = stablehlo.convert %arg3 : tensor<f32> loc(#loc103)
    %2 = stablehlo.add %0, %1 : tensor<f32> loc(#loc104)
    %3 = stablehlo.convert %arg4 : tensor<f32> loc(#loc105)
    %4 = stablehlo.multiply %arg2, %3 : tensor<f32> loc(#loc106)
    %5 = stablehlo.subtract %2, %4 : tensor<f32> loc(#loc107)
    return %arg5, %5, %5 : tensor<f32>, tensor<f32>, tensor<f32> loc(#loc108)
  } loc(#loc108)
} loc(#loc)
#loc1 = loc("/workspaces/jxap/python/jxap/export.py":167:25 to 168:69)
#loc2 = loc("/workspaces/jxap/plugins/phaser_plugin.py":73:4 to :37)
#loc3 = loc("/workspaces/.venv/lib/python3.11/site-packages/absl/app.py":261:13 to :23)
#loc4 = loc("/workspaces/.venv/lib/python3.11/site-packages/absl/app.py":316:6 to :27)
#loc5 = loc("/workspaces/jxap/plugins/phaser_plugin.py":78:4 to :17)
#loc6 = loc("/home/vscode/.vscode-server/extensions/ms-python.debugpy-2025.10.0-linux-x64/bundled/libs/debugpy/_vendored/pydevd/_pydevd_bundle/pydevd_runpy.py":118:4 to :27)
#loc7 = loc("/home/vscode/.vscode-server/extensions/ms-python.debugpy-2025.10.0-linux-x64/bundled/libs/debugpy/_vendored/pydevd/_pydevd_bundle/pydevd_runpy.py":127:8 to :93)
#loc8 = loc("/home/vscode/.vscode-server/extensions/ms-python.debugpy-2025.10.0-linux-x64/bundled/libs/debugpy/_vendored/pydevd/_pydevd_bundle/pydevd_runpy.py":310:15 to :99)
#loc9 = loc("/home/vscode/.vscode-server/extensions/ms-python.debugpy-2025.10.0-linux-x64/bundled/libs/debugpy/adapter/../../debugpy/launcher/../../debugpy/../debugpy/server/cli.py":351:4 to :47)
#loc10 = loc("/home/vscode/.vscode-server/extensions/ms-python.debugpy-2025.10.0-linux-x64/bundled/libs/debugpy/adapter/../../debugpy/launcher/../../debugpy/../debugpy/server/cli.py":501:12 to :17)
#loc15 = loc("/workspaces/jxap/plugins/phaser_plugin.py":41:28 to :70)
#loc16 = loc("/workspaces/jxap/python/jxap/export.py":161:18 to :62)
#loc17 = loc("/workspaces/jxap/plugins/phaser_plugin.py":41:20 to :71)
#loc18 = loc("/workspaces/jxap/plugins/phaser_plugin.py":42:17 to :32)
#loc19 = loc("/workspaces/jxap/plugins/phaser_plugin.py":42:37 to :52)
#loc20 = loc("/workspaces/jxap/plugins/phaser_plugin.py":42:16 to :53)
#loc21 = loc("/workspaces/jxap/plugins/phaser_plugin.py":55:53 to 59:9)
#loc22 = loc("/workspaces/jxap/plugins/phaser_plugin.py":47:18 to :29)
#loc23 = loc("/workspaces/jxap/plugins/phaser_plugin.py":47:18 to :38)
#loc24 = loc("/workspaces/jxap/plugins/phaser_plugin.py":47:41 to :55)
#loc25 = loc("/workspaces/jxap/plugins/phaser_plugin.py":47:18 to :55)
#loc26 = loc("export_plugin"(#loc1))
#loc27 = loc("main"(#loc2))
#loc28 = loc("_run_main"(#loc3))
#loc29 = loc("run"(#loc4))
#loc30 = loc("<module>"(#loc5))
#loc31 = loc("_run_code"(#loc6))
#loc32 = loc("_run_module_code"(#loc7))
#loc33 = loc("run_path"(#loc8))
#loc34 = loc("run_file"(#loc9))
#loc35 = loc("main"(#loc10))
#loc36 = loc("PhaserPlugin.process"(#loc15))
#loc37 = loc("export_plugin.<locals>._update_fn"(#loc16))
#loc38 = loc("PhaserPlugin.process"(#loc17))
#loc39 = loc("PhaserPlugin.process"(#loc18))
#loc40 = loc("PhaserPlugin.process"(#loc19))
#loc41 = loc("PhaserPlugin.process"(#loc20))
#loc42 = loc("PhaserPlugin.process"(#loc21))
#loc43 = loc("PhaserPlugin.process.<locals>.allpass_step"(#loc22))
#loc44 = loc("PhaserPlugin.process.<locals>.allpass_step"(#loc23))
#loc45 = loc("PhaserPlugin.process.<locals>.allpass_step"(#loc24))
#loc46 = loc("PhaserPlugin.process.<locals>.allpass_step"(#loc25))
#loc47 = loc(callsite(#loc34 at #loc35))
#loc48 = loc(callsite(#loc32 at #loc33))
#loc49 = loc(callsite(#loc31 at #loc32))
#loc50 = loc(callsite(#loc33 at #loc47))
#loc51 = loc(callsite(#loc31 at #loc48))
#loc52 = loc(callsite(#loc30 at #loc49))
#loc53 = loc(callsite(#loc32 at #loc50))
#loc54 = loc(callsite(#loc30 at #loc51))
#loc55 = loc(callsite(#loc29 at #loc52))
#loc56 = loc(callsite(#loc31 at #loc53))
#loc57 = loc(callsite(#loc29 at #loc54))
#loc58 = loc(callsite(#loc28 at #loc55))
#loc59 = loc(callsite(#loc30 at #loc56))
#loc60 = loc(callsite(#loc28 at #loc57))
#loc61 = loc(callsite(#loc27 at #loc58))
#loc62 = loc(callsite(#loc29 at #loc59))
#loc63 = loc(callsite(#loc27 at #loc60))
#loc64 = loc(callsite(#loc26 at #loc61))
#loc65 = loc(callsite(#loc28 at #loc62))
#loc66 = loc(callsite(#loc26 at #loc63))
#loc67 = loc(callsite(#loc37 at #loc64))
#loc68 = loc(callsite(#loc27 at #loc65))
#loc69 = loc(callsite(#loc37 at #loc66))
#loc70 = loc(callsite(#loc42 at #loc67))
#loc71 = loc(callsite(#loc26 at #loc68))
#loc72 = loc(callsite(#loc36 at #loc69))
#loc73 = loc(callsite(#loc38 at #loc69))
#loc74 = loc(callsite(#loc39 at #loc69))
#loc75 = loc(callsite(#loc40 at #loc69))
#loc76 = loc(callsite(#loc41 at #loc69))
#loc77 = loc(callsite(#loc42 at #loc69))
#loc78 = loc(callsite(#loc43 at #loc70))
#loc79 = loc(callsite(#loc44 at #loc70))
#loc80 = loc(callsite(#loc45 at #loc70))
#loc81 = loc(callsite(#loc46 at #loc70))
#loc82 = loc("dimension_size"(#loc71))
#loc83 = loc("ge"(#loc71))
#loc84 = loc("shape_assertion"(#loc71))
#loc85 = loc("convert_element_type"(#loc71))
#loc86 = loc("add"(#loc71))
#loc87 = loc("jit(_update_fn)/div"(#loc72))
#loc88 = loc("jit(_update_fn)/tan"(#loc73))
#loc89 = loc("jit(_update_fn)/sub"(#loc74))
#loc90 = loc("jit(_update_fn)/add"(#loc75))
#loc91 = loc("jit(_update_fn)/div"(#loc76))
#loc92 = loc("jit(_update_fn)/broadcast_in_dim"(#loc77))
#loc93 = loc("jit(_update_fn)/while"(#loc77))
#loc94 = loc("jit(_update_fn)/while/cond/lt"(#loc77))
#loc95 = loc("jit(_update_fn)/while/body/dynamic_slice"(#loc77))
#loc96 = loc("jit(_update_fn)/while/body/squeeze"(#loc77))
#loc97 = loc("jit(_update_fn)/while/body/closed_call"(#loc77))
#loc98 = loc("jit(_update_fn)/while/body/broadcast_in_dim"(#loc77))
#loc99 = loc("jit(_update_fn)/while/body/dynamic_update_slice"(#loc77))
#loc100 = loc("jit(_update_fn)/while/body/add"(#loc77))
#loc101 = loc("while/body/closed_call"(#loc77))
#loc102 = loc("mul"(#loc78))
#loc103 = loc("convert_element_type"(#loc79))
#loc104 = loc("add"(#loc79))
#loc105 = loc("convert_element_type"(#loc80))
#loc106 = loc("mul"(#loc80))
#loc107 = loc("sub"(#loc81))
#loc108 = loc("closed_call:"(#loc101))
