#loc = loc(unknown)
#loc11 = loc("buffers['input']")
#loc12 = loc("sample_rate")
module @jit__init_fn attributes {jax.uses_shape_polymorphism = true, mhlo.num_partitions = 1 : i32, mhlo.num_replicas = 1 : i32} {
  func.func public @main(%arg0: tensor<i32> {jax.global_constant = "_platform_index"} loc(unknown), %arg1: tensor<?x?xf32> loc(unknown), %arg2: tensor<f32> loc(unknown)) -> (tensor<?xf32> {jax.result_info = "result[0]"}) {
    %c = stablehlo.constant dense<0> : tensor<i32> loc(#loc)
    %c_0 = stablehlo.constant dense<-1> : tensor<i32> loc(#loc)
    %c_1 = stablehlo.constant dense<1> : tensor<i32> loc(#loc)
    %0 = stablehlo.get_dimension_size %arg1, dim = 0 : (tensor<?x?xf32>) -> tensor<i32> loc(#loc45)
    %1 = stablehlo.get_dimension_size %arg1, dim = 1 : (tensor<?x?xf32>) -> tensor<i32> loc(#loc45)
    %2 = stablehlo.compare  GE, %0, %c_1,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc46)
    stablehlo.custom_call @shape_assertion(%2, %0) {api_version = 2 : i32, error_message = "Input shapes do not match the polymorphic shapes specification. Expected value >= 1 for dimension variable 'BufferSize'. Using the following polymorphic shapes specifications: args[0]['input'].shape = (BufferSize, NumChannels0). Obtained dimension variables: 'BufferSize' = {0} from specification 'BufferSize' for dimension args[0]['input'].shape[0] (= {0}), . Please see https://docs.jax.dev/en/latest/export/shape_poly.html#shape-assertion-errors for more details.", has_side_effect = true} : (tensor<i1>, tensor<i32>) -> () loc(#loc47)
    %3 = stablehlo.compare  GE, %1, %c_1,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc46)
    stablehlo.custom_call @shape_assertion(%3, %0, %1) {api_version = 2 : i32, error_message = "Input shapes do not match the polymorphic shapes specification. Expected value >= 1 for dimension variable 'NumChannels0'. Using the following polymorphic shapes specifications: args[0]['input'].shape = (BufferSize, NumChannels0). Obtained dimension variables: 'BufferSize' = {0} from specification 'BufferSize' for dimension args[0]['input'].shape[0] (= {0}), 'NumChannels0' = {1} from specification 'NumChannels0' for dimension args[0]['input'].shape[1] (= {1}), . Please see https://docs.jax.dev/en/latest/export/shape_poly.html#shape-assertion-errors for more details.", has_side_effect = true} : (tensor<i1>, tensor<i32>, tensor<i32>) -> () loc(#loc47)
    %4 = stablehlo.convert %0 : tensor<i32> loc(#loc48)
    %5 = stablehlo.add %4, %c_0 : tensor<i32> loc(#loc49)
    %6 = stablehlo.compare  GE, %5, %c,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc46)
    %7 = stablehlo.convert %0 : tensor<i32> loc(#loc48)
    %8 = stablehlo.add %7, %c_0 : tensor<i32> loc(#loc49)
    stablehlo.custom_call @shape_assertion(%6, %8, %0, %1) {api_version = 2 : i32, error_message = "Input shapes do not match the symbolic shape constraint BufferSize >= 1. Expected 'BufferSize - 1' to be greater or equal to 0, but found {0}.  Using the following polymorphic shapes specifications: args[0]['input'].shape = (BufferSize, NumChannels0). Obtained dimension variables: 'BufferSize' = {1} from specification 'BufferSize' for dimension args[0]['input'].shape[0] (= {1}), 'NumChannels0' = {2} from specification 'NumChannels0' for dimension args[0]['input'].shape[1] (= {2}), . Please see https://docs.jax.dev/en/latest/export/shape_poly.html#shape-assertion-errors for more details.", has_side_effect = true} : (tensor<i1>, tensor<i32>, tensor<i32>, tensor<i32>) -> () loc(#loc47)
    %9 = stablehlo.convert %1 : tensor<i32> loc(#loc48)
    %10 = stablehlo.add %9, %c_0 : tensor<i32> loc(#loc49)
    %11 = stablehlo.compare  GE, %10, %c,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc46)
    %12 = stablehlo.convert %1 : tensor<i32> loc(#loc48)
    %13 = stablehlo.add %12, %c_0 : tensor<i32> loc(#loc49)
    stablehlo.custom_call @shape_assertion(%11, %13, %0, %1) {api_version = 2 : i32, error_message = "Input shapes do not match the symbolic shape constraint NumChannels0 >= 1. Expected 'NumChannels0 - 1' to be greater or equal to 0, but found {0}.  Using the following polymorphic shapes specifications: args[0]['input'].shape = (BufferSize, NumChannels0). Obtained dimension variables: 'BufferSize' = {1} from specification 'BufferSize' for dimension args[0]['input'].shape[0] (= {1}), 'NumChannels0' = {2} from specification 'NumChannels0' for dimension args[0]['input'].shape[1] (= {2}), . Please see https://docs.jax.dev/en/latest/export/shape_poly.html#shape-assertion-errors for more details.", has_side_effect = true} : (tensor<i1>, tensor<i32>, tensor<i32>, tensor<i32>) -> () loc(#loc47)
    %14 = call @_wrapped_jax_export_main(%arg0, %0, %1, %arg1, %arg2) : (tensor<i32>, tensor<i32>, tensor<i32>, tensor<?x?xf32>, tensor<f32>) -> tensor<?xf32> loc(#loc)
    return %14 : tensor<?xf32> loc(#loc)
  } loc(#loc)
  func.func private @_wrapped_jax_export_main(%arg0: tensor<i32> {jax.global_constant = "_platform_index"} loc(unknown), %arg1: tensor<i32> {jax.global_constant = "BufferSize"} loc(unknown), %arg2: tensor<i32> {jax.global_constant = "NumChannels0"} loc(unknown), %arg3: tensor<?x?xf32> loc("buffers['input']"), %arg4: tensor<f32> loc("sample_rate")) -> (tensor<?xf32> {jax.result_info = "result[0]"}) {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc)
    %0 = stablehlo.reshape %arg2 : (tensor<i32>) -> tensor<1xi32> loc(#loc50)
    %1 = stablehlo.dynamic_broadcast_in_dim %cst, %0, dims = [] : (tensor<f32>, tensor<1xi32>) -> tensor<?xf32> loc(#loc50)
    return %1 : tensor<?xf32> loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/workspaces/jax-audio-plugins/python/jax_audio_plugins/export.py":97:23 to 98:79)
#loc2 = loc("/workspaces/jax-audio-plugins/python/jax_audio_plugins/export_test.py":47:8 to :49)
#loc3 = loc("/workspaces/.venv/lib/python3.11/site-packages/absl/testing/_pretty_print_reporter.py":84:13 to :30)
#loc4 = loc("/workspaces/.venv/lib/python3.11/site-packages/absl/testing/absltest.py":2793:19 to :56)
#loc5 = loc("/workspaces/.venv/lib/python3.11/site-packages/absl/testing/absltest.py":2829:35 to 2831:3)
#loc6 = loc("/workspaces/.venv/lib/python3.11/site-packages/absl/testing/absltest.py":2373:6 to :34)
#loc7 = loc("/workspaces/.venv/lib/python3.11/site-packages/absl/app.py":261:13 to :23)
#loc8 = loc("/workspaces/.venv/lib/python3.11/site-packages/absl/app.py":316:6 to :27)
#loc9 = loc("/workspaces/.venv/lib/python3.11/site-packages/absl/testing/absltest.py":2375:4 to :31)
#loc10 = loc("/workspaces/.venv/lib/python3.11/site-packages/absl/testing/absltest.py":2269:2 to :38)
#loc13 = loc("/workspaces/jax-audio-plugins/python/jax_audio_plugins/export_test.py":32:43 to :63)
#loc14 = loc("/workspaces/jax-audio-plugins/python/jax_audio_plugins/export.py":92:43 to :76)
#loc15 = loc("export_plugin"(#loc1))
#loc16 = loc("ExportingTest.test_export_plugin"(#loc2))
#loc17 = loc("TextTestRunner.run"(#loc3))
#loc18 = loc("_run_and_get_tests_result"(#loc4))
#loc19 = loc("run_tests"(#loc5))
#loc20 = loc("_run_in_app.<locals>.main_function"(#loc6))
#loc21 = loc("_run_main"(#loc7))
#loc22 = loc("run"(#loc8))
#loc23 = loc("_run_in_app"(#loc9))
#loc24 = loc("main"(#loc10))
#loc25 = loc("TestPlugin.init"(#loc13))
#loc26 = loc("export_plugin.<locals>._init_fn"(#loc14))
#loc27 = loc(callsite(#loc23 at #loc24))
#loc28 = loc(callsite(#loc21 at #loc22))
#loc29 = loc(callsite(#loc22 at #loc27))
#loc30 = loc(callsite(#loc20 at #loc28))
#loc31 = loc(callsite(#loc21 at #loc29))
#loc32 = loc(callsite(#loc19 at #loc30))
#loc33 = loc(callsite(#loc20 at #loc31))
#loc34 = loc(callsite(#loc18 at #loc32))
#loc35 = loc(callsite(#loc19 at #loc33))
#loc36 = loc(callsite(#loc17 at #loc34))
#loc37 = loc(callsite(#loc18 at #loc35))
#loc38 = loc(callsite(#loc16 at #loc36))
#loc39 = loc(callsite(#loc17 at #loc37))
#loc40 = loc(callsite(#loc15 at #loc38))
#loc41 = loc(callsite(#loc16 at #loc39))
#loc42 = loc(callsite(#loc26 at #loc40))
#loc43 = loc(callsite(#loc15 at #loc41))
#loc44 = loc(callsite(#loc25 at #loc42))
#loc45 = loc("/dimension_size"(#loc43))
#loc46 = loc("/ge"(#loc43))
#loc47 = loc("/shape_assertion"(#loc43))
#loc48 = loc("/convert_element_type"(#loc43))
#loc49 = loc("/add"(#loc43))
#loc50 = loc("jit(_init_fn)/jit(main)/broadcast_in_dim"(#loc44))
